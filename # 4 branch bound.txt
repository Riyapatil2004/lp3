# 4 branch bound

# 0/1 Knapsack function using Dynamic Programming
def knapsack_01(values, weights, W):
    n = len(values)  # Number of items
    # Create a 2D list 'dp' to store maximum values for subproblems
    dp = [[0] * (W + 1) for _ in range(n + 1)]

    # Fill dp table row by row, representing items from 1 to n
    for i in range(1, n + 1):
        # Check each possible knapsack weight from 1 to W
        for w in range(1, W + 1):
            # If the current item's weight is less than or equal to the current capacity
            if weights[i - 1] <= w:
                # Determine max value between including or excluding the current item
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1])
            else:
                # If the item can't be included, take the previous best value without it
                dp[i][w] = dp[i - 1][w]

    # The maximum value that can be achieved with the full knapsack capacity
    max_value = dp[n][W]

    # Determine which items were included in the knapsack to achieve this max value
    selected_items = []  # List to store indices of selected items
    w = W  # Start from full knapsack capacity
    for i in range(n, 0, -1):
        # Check if this item was included by comparing current and previous row values
        if dp[i][w] != dp[i - 1][w]:
            selected_items.append(i - 1)  # Add item index (adjusted for 0-based indexing)
            w -= weights[i - 1]  # Decrease capacity by the weight of included item

    # Return the maximum value and the list of selected items
    return max_value, selected_items

# Main function to get user input and run the knapsack function
if __name__ == "__main__":
    # Get number of items from the user
    n = int(input("Enter the number of items: "))
    
    values = []  # List to store values of items
    weights = []  # List to store weights of items

    # Get value and weight for each item
    for i in range(n):
        value = int(input(f"Enter value of item {i + 1}: "))  # Input item's value
        weight = int(input(f"Enter weight of item {i + 1}: "))  # Input item's weight
        values.append(value)  # Add value to the values list
        weights.append(weight)  # Add weight to the weights list
    
    # Get the knapsack capacity from the user
    W = int(input("Enter the capacity of the knapsack: "))

    # Call the knapsack function and get the maximum value and selected items
    max_value, selected_items = knapsack_01(values, weights, W)
    
    # Print the maximum value achieved
    print("Maximum value:", max_value)
    # Print the indices of selected items that contribute to the maximum value
    print("Selected items (by index):", selected_items)

output:

output:

Enter the number of items: 4
Enter value of item 1: 3
Enter weight of item 1: 2
Enter value of item 2: 4
Enter weight of item 2: 3
Enter value of item 3: 5
Enter weight of item 3: 4
Enter value of item 4: 6
Enter weight of item 4: 5
Enter the capacity of the knapsack: 5
Maximum value: 7
Selected items (by index): [1, 0]

=== Code Execution Successful ===